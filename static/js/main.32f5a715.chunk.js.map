{"version":3,"sources":["utils/pinata.js","utils/interact.js","Minter.js","App.js","reportWebVitals.js","index.js"],"names":["require","config","axios","pinJSONToIPFS","JSONBody","a","post","headers","pinata_api_key","process","pinata_secret_api_key","then","response","success","pinataUrl","data","IpfsHash","catch","error","console","log","message","sendFileToIPFS","fileImg","formData","FormData","append","method","url","resFile","pinataHash","web3","createAlchemyWeb3","contractABI","contractAddress","CONTRACT_ADDRESS","connectWallet","window","ethereum","request","addressArray","obj","status","address","target","rel","href","getCurrentWalletConnected","length","mintNFT","name","description","fileToUpload","trim","returnedValue","metadata","image","pinataResponse","tokenURI","eth","Contract","contract","transactionParameters","to","from","selectedAddress","methods","encodeABI","params","txHash","Minter","props","useState","walletAddress","setWallet","setStatus","setName","setDescription","setFileImg","connectWalletPressed","walletResponse","onMintPressed","setTheFileImg","e","files","useEffect","callFunction","on","accounts","className","id","onClick","String","substring","type","placeholder","onChange","event","value","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.32f5a715.chunk.js","sourcesContent":["require(\"dotenv\").config();\r\n\r\nconst axios = require(\"axios\");\r\n\r\nexport const pinJSONToIPFS = async (JSONBody) => {\r\n  const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`;\r\n  //making axios POST request to Pinata ⬇️\r\n  return axios\r\n    .post(url, JSONBody, {\r\n      headers: {\r\n        pinata_api_key: process.env.REACT_APP_PINATA_KEY,\r\n        pinata_secret_api_key: process.env.REACT_APP_PINATA_SECRET,\r\n      },\r\n    })\r\n    .then(function (response) {\r\n      return {\r\n        success: true,\r\n        pinataUrl:\r\n          \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash,\r\n      };\r\n    })\r\n    .catch(function (error) {\r\n      console.log(error);\r\n      return {\r\n        success: false,\r\n        message: error.message,\r\n      };\r\n    });\r\n};\r\n\r\nexport const sendFileToIPFS = async (fileImg) => {\r\n  if (fileImg) {\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append(\"file\", fileImg);\r\n\r\n      const resFile = await axios({\r\n        method: \"post\",\r\n        url: \"https://api.pinata.cloud/pinning/pinFileToIPFS\",\r\n        data: formData,\r\n        headers: {\r\n          pinata_api_key: `${process.env.REACT_APP_PINATA_KEY}`,\r\n          pinata_secret_api_key: `${process.env.REACT_APP_PINATA_SECRET}`,\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      });\r\n\r\n      //const ImgHash = `ipfs://${resFile.data.IpfsHash}`;\r\n      return {\r\n        success: true,\r\n        pinataUrl: \"https://gateway.pinata.cloud/ipfs/\" + resFile.data.IpfsHash,\r\n        pinataHash: resFile.data.IpfsHash,\r\n      };\r\n      //console.log(ImgHash);\r\n      //Take a look at your Pinata Pinned section, you will see a new file added to you list.\r\n    } catch (error) {\r\n      //   console.log(\"Error sending File to IPFS: \");\r\n      //   console.log(error);\r\n      return {\r\n        success: false,\r\n        message: error.message,\r\n      };\r\n    }\r\n  }\r\n};\r\n","import { pinJSONToIPFS, sendFileToIPFS } from \"./pinata.js\";\r\nrequire(\"dotenv\").config();\r\n\r\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\r\nconst web3 = createAlchemyWeb3(process.env.REACT_APP_ALCHEMY_KEY);\r\n\r\nconst contractABI = require(\"../contract-abi.json\");\r\nconst contractAddress = process.env.CONTRACT_ADDRESS;\r\n\r\nexport const connectWallet = async () => {\r\n  if (window.ethereum) {\r\n    try {\r\n      const addressArray = await window.ethereum.request({\r\n        method: \"eth_requestAccounts\",\r\n      });\r\n      const obj = {\r\n        status: \"👆🏽 Write a message in the text-field above.\",\r\n        address: addressArray[0],\r\n      };\r\n      return obj;\r\n    } catch (err) {\r\n      return {\r\n        address: \"\",\r\n        status: \"😥 \" + err.message,\r\n      };\r\n    }\r\n  } else {\r\n    return {\r\n      address: \"\",\r\n      status: (\r\n        <span>\r\n          <p>\r\n            {\" \"}\r\n            🦊{\" \"}\r\n            <a\r\n              target=\"_blank\"\r\n              rel=\"noreferrer\"\r\n              href={`https://metamask.io/download.html`}\r\n            >\r\n              You must install Metamask, a virtual Ethereum wallet, in your\r\n              browser.\r\n            </a>\r\n          </p>\r\n        </span>\r\n      ),\r\n    };\r\n  }\r\n};\r\n\r\nexport const getCurrentWalletConnected = async () => {\r\n  if (window.ethereum) {\r\n    try {\r\n      const addressArray = await window.ethereum.request({\r\n        method: \"eth_accounts\",\r\n      });\r\n      if (addressArray.length > 0) {\r\n        return {\r\n          address: addressArray[0],\r\n          status: \"👆🏽 Write a message in the text-field above.\",\r\n        };\r\n      } else {\r\n        return {\r\n          address: \"\",\r\n          status: \"🦊 Connect to Metamask using the top right button.\",\r\n        };\r\n      }\r\n    } catch (err) {\r\n      return {\r\n        address: \"\",\r\n        status: \"😥 \" + err.message,\r\n      };\r\n    }\r\n  } else {\r\n    return {\r\n      address: \"\",\r\n      status: (\r\n        <span>\r\n          <p>\r\n            {\" \"}\r\n            🦊{\" \"}\r\n            <a\r\n              target=\"_blank\"\r\n              rel=\"noreferrer\"\r\n              href={`https://metamask.io/download.html`}\r\n            >\r\n              You must install Metamask, a virtual Ethereum wallet, in your\r\n              browser.\r\n            </a>\r\n          </p>\r\n        </span>\r\n      ),\r\n    };\r\n  }\r\n};\r\n\r\nexport const mintNFT = async (name, description, fileToUpload) => {\r\n  //error handling\r\n  if (name.trim() === \"\" || description.trim() === \"\") {\r\n    return {\r\n      success: false,\r\n      status: \"❗Please make sure all fields are completed before minting.\",\r\n    };\r\n  }\r\n  if (fileToUpload === null) {\r\n    return {\r\n      success: false,\r\n      status: \"❗Please upload the file you want to mint as NFT.\",\r\n    };\r\n  }\r\n\r\n  const returnedValue = await sendFileToIPFS(fileToUpload);\r\n  if (!returnedValue.success) {\r\n    return {\r\n      success: false,\r\n      status: \"😢 \" + returnedValue.message,\r\n    };\r\n  }\r\n\r\n  //make metadata\r\n  const metadata = {};\r\n  metadata.name = name;\r\n  metadata.image = returnedValue.pinataUrl;\r\n  metadata.description = description;\r\n\r\n  //pinata pin request\r\n  const pinataResponse = await pinJSONToIPFS(metadata);\r\n  if (!pinataResponse.success) {\r\n    return {\r\n      success: false,\r\n      status: \"😢 Something went wrong while uploading your tokenURI.\",\r\n    };\r\n  }\r\n  const tokenURI = pinataResponse.pinataUrl;\r\n\r\n  //load smart contract\r\n  window.contract = await new web3.eth.Contract(contractABI, contractAddress); //loadContract();\r\n\r\n  //set up your Ethereum transaction\r\n  const transactionParameters = {\r\n    to: contractAddress, // Required except during contract publications.\r\n    from: window.ethereum.selectedAddress, // must match user's active address.\r\n    data: window.contract.methods\r\n      .mintNFT(window.ethereum.selectedAddress, tokenURI)\r\n      .encodeABI(), //make call to NFT smart contract\r\n  };\r\n\r\n  //sign transaction via Metamask\r\n  try {\r\n    const txHash = await window.ethereum.request({\r\n      method: \"eth_sendTransaction\",\r\n      params: [transactionParameters],\r\n    });\r\n    return {\r\n      success: true,\r\n      status:\r\n        \"✅ Check out your transaction on Etherscan: https://goerli.etherscan.io/tx/\" +\r\n        txHash,\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      success: false,\r\n      status: \"😥 Something went wrong: \" + error.message,\r\n    };\r\n  }\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport {\r\n  connectWallet,\r\n  getCurrentWalletConnected,\r\n  mintNFT,\r\n} from \"./utils/interact.js\";\r\n\r\nconst Minter = (props) => {\r\n  //State variables\r\n\r\n  const [walletAddress, setWallet] = useState(\"\");\r\n  const [status, setStatus] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  //const [url, setURL] = useState(\"\");\r\n  const [fileImg, setFileImg] = useState(null);\r\n\r\n  const connectWalletPressed = async () => {\r\n    //TODO: implement\r\n    const walletResponse = await connectWallet();\r\n    setStatus(walletResponse.status);\r\n    setWallet(walletResponse.address);\r\n  };\r\n\r\n  function addWalletListener() {\r\n    if (window.ethereum) {\r\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n        if (accounts.length > 0) {\r\n          setWallet(accounts[0]);\r\n          setStatus(\"👆🏽 Write a message in the text-field above.\");\r\n        } else {\r\n          setWallet(\"\");\r\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\r\n        }\r\n      });\r\n    } else {\r\n      setStatus(\r\n        <p>\r\n          {\" \"}\r\n          🦊{\" \"}\r\n          <a\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n            href={`https://metamask.io/download.html`}\r\n          >\r\n            You must install Metamask, a virtual Ethereum wallet, in your\r\n            browser.\r\n          </a>\r\n        </p>\r\n      );\r\n    }\r\n  }\r\n\r\n  const onMintPressed = async () => {\r\n    const { status } = await mintNFT(name, description, fileImg);\r\n    setStatus(status);\r\n  };\r\n\r\n  const setTheFileImg = async (e) => {\r\n    setFileImg(e.target.files[0]);\r\n  };\r\n\r\n  useEffect(() => {\r\n    //TODO: implement\r\n    const callFunction = async () => {\r\n      const { address, status } = await getCurrentWalletConnected();\r\n      setWallet(address);\r\n      setStatus(status);\r\n    };\r\n    callFunction();\r\n\r\n    addWalletListener();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"Minter\">\r\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\r\n        {walletAddress.length > 0 ? (\r\n          \"Connected: \" +\r\n          String(walletAddress).substring(0, 6) +\r\n          \"...\" +\r\n          String(walletAddress).substring(38)\r\n        ) : (\r\n          <span>Connect Wallet</span>\r\n        )}\r\n      </button>\r\n\r\n      <br></br>\r\n      <h1 id=\"title\">🧙‍♂️ Awesome Chibyke NFT Minter</h1>\r\n      <p>\r\n        Simply add your asset's link, name, and description, then press \"Mint.\"\r\n      </p>\r\n      <form>\r\n        <h2>🖼 Upload File: </h2>\r\n        <input\r\n          type=\"file\"\r\n          placeholder=\"Upload File\"\r\n          onChange={(e) => setTheFileImg(e)}\r\n        />\r\n\r\n        <h2>🤔 Name: </h2>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"e.g. My first NFT!\"\r\n          onChange={(event) => setName(event.target.value)}\r\n        />\r\n        <h2>✍️ Description: </h2>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"e.g. Even cooler than cryptokitties ;)\"\r\n          onChange={(event) => setDescription(event.target.value)}\r\n        />\r\n      </form>\r\n      <button id=\"mintButton\" onClick={onMintPressed}>\r\n        Mint NFT\r\n      </button>\r\n      <p id=\"status\">{status}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Minter;\r\n","import \"./App.css\";\r\nimport Minter from \"./Minter\";\r\n//import dotenv from \"dotenv\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Minter></Minter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}